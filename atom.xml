<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wuuu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wucb.top/"/>
  <updated>2017-12-15T09:47:28.060Z</updated>
  <id>http://wucb.top/</id>
  
  <author>
    <name>wucb</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jmeter 并发测试工具</title>
    <link href="http://wucb.top/2017/12/15/jmeter_use/"/>
    <id>http://wucb.top/2017/12/15/jmeter_use/</id>
    <published>2017-12-15T08:06:06.000Z</published>
    <updated>2017-12-15T09:47:28.060Z</updated>
    
    <content type="html"><![CDATA[<p>jmeter3.2</p><h3 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h3><hr><ul><li>1.模拟多线程发送请求。</li><li>2.测试定时和延时的功能。</li><li>3.请求数据，参数化配置。</li><li>4.请求的响应数据提取和供给其他请求使用。</li><li>5.计数器功能，解决唯一性校验问题。</li><li>6.聚合报告功能。</li></ul><h3 id="脚本录制。"><a href="#脚本录制。" class="headerlink" title="脚本录制。"></a>脚本录制。</h3><hr><p>推荐使用BlazeMeter(chrome插件)录制后，即可得到一个半成品的脚本。</p><h3 id="用户参数。"><a href="#用户参数。" class="headerlink" title="用户参数。"></a>用户参数。</h3><hr><p>添加全局变量<br><img src="/2017/12/15/jmeter_use/1.png"></p><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><hr><p>通过计数器 来设置一个会变的全局变量<br> <img src="/2017/12/15/jmeter_use/2.png"></p><h3 id="登录用户名密码"><a href="#登录用户名密码" class="headerlink" title="登录用户名密码"></a>登录用户名密码</h3><hr><p>加载文件 ，文件里面数据格式为username，pwd<br><img src="/2017/12/15/jmeter_use/3.png"></p><h3 id="结果提取-正则表达式"><a href="#结果提取-正则表达式" class="headerlink" title="结果提取 正则表达式"></a>结果提取 正则表达式</h3><hr><img src="/2017/12/15/jmeter_use/4.png"><p>将结果 设置为全局变量 <code>${__setProperty(token,${token},)}</code> 取值的时候用<code>${__property(token)}</code></p><h3 id="上传文件配置"><a href="#上传文件配置" class="headerlink" title="上传文件配置"></a>上传文件配置</h3><hr> <img src="/2017/12/15/jmeter_use/5.png"><p>如果上传失败尝试修改成java  如下图</p>  <img src="/2017/12/15/jmeter_use/6.png"><h2 id="Linux-测试"><a href="#Linux-测试" class="headerlink" title="Linux 测试"></a>Linux 测试</h2><hr><h3 id="单台测试"><a href="#单台测试" class="headerlink" title="单台测试"></a>单台测试</h3><hr><p>启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./apache-jmeter-3.2/bin/jmeter -n -t ./test/test-01.jmx -l ./test/test-01.jtl -j ./test/log.txt</span><br><span class="line"></span><br><span class="line">-n  nogui 意思是不使用界面</span><br><span class="line">-t  后面跟要执行的测试脚本</span><br><span class="line">-l  后面跟测试结果保存的文件</span><br><span class="line">-j  日志文件</span><br></pre></td></tr></table></figure><p>测试结果文件可以在gui界面加载</p><h3 id="分布式测试"><a href="#分布式测试" class="headerlink" title="分布式测试"></a>分布式测试</h3><h4 id="server端配置"><a href="#server端配置" class="headerlink" title="server端配置"></a>server端配置</h4><hr><p>启动：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./apache-jmeter-3.2/bin/jmeter-server</span><br></pre></td></tr></table></figure></p><p>默认远程1099端口，如果该端口已经被使用了，就需要修改bin目录下面的jmeter.propertis 配置文件<br>修改<code>server_port=1109</code>，默认是1099.</p><h4 id="client"><a href="#client" class="headerlink" title="client"></a>client</h4><hr><p> 机器 负责调用 多个server进行测试，client 自己也可以是server<br>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./apache-jmeter-3.2/bin/jmeter -n -t ./test/test-01.jmx -R 192.168.16.67:11099 -l ./test/test-01.jtl -j ./test/log.txt</span><br></pre></td></tr></table></figure><p>-R后面跟server的ip和端口，过个用逗号隔开</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jmeter3.2&lt;/p&gt;
&lt;h3 id=&quot;功能说明&quot;&gt;&lt;a href=&quot;#功能说明&quot; class=&quot;headerlink&quot; title=&quot;功能说明&quot;&gt;&lt;/a&gt;功能说明&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;1.模拟多线程发送请求。&lt;/li&gt;
&lt;li&gt;2.测试定时和延时的功能
      
    
    </summary>
    
      <category term="jmeter" scheme="http://wucb.top/categories/jmeter/"/>
    
    
      <category term="jmeter" scheme="http://wucb.top/tags/jmeter/"/>
    
  </entry>
  
  <entry>
    <title>FastDFS 简介</title>
    <link href="http://wucb.top/2017/12/13/fastdfs_des/"/>
    <id>http://wucb.top/2017/12/13/fastdfs_des/</id>
    <published>2017-12-13T03:10:34.000Z</published>
    <updated>2017-12-15T03:09:23.795Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><hr><p>作者：FastDFS是由国人余庆所开发</p><blockquote><p>1.FastDFS是一个轻量级开源分布式文件系统<br>2.主要解决了大容量的文件存储和高并发访问的问题。<br>3.支持存储服务器在线扩容,支持相同的文件只保存一份</p></blockquote><h3 id="主要概念"><a href="#主要概念" class="headerlink" title="主要概念"></a>主要概念</h3><blockquote><p>1.tracker server 跟踪服务器：调度来自客户端的请求。返回可用的Storage server的IP地址和端口号<br>2.storage server 存储服务器：用来存储文件(data)和文件属性(metadata)<br>3.client 客户端：请求发起方，通过专用接口基于TCP协议与tracker以及storage server进行交互<br>4.storage组\卷 : 相互独立</p></blockquote><h3 id="上传流程"><a href="#上传流程" class="headerlink" title="上传流程"></a>上传流程</h3><p>1.客户端向tracker server发起请求<br>2.tracker server返回可用的Storage server的地址和端口<br>3.客户端链接该Storage server并上传文件<br>4.Storage server返回上传后的文件地址</p><h3 id="下载流程"><a href="#下载流程" class="headerlink" title="下载流程"></a>下载流程</h3><p>下载和上传的流程一致</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;作者：FastDFS是由国人余庆所开发&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.FastDFS是一个轻量级开源分布式文件系统&lt;
      
    
    </summary>
    
      <category term="FastDFS" scheme="http://wucb.top/categories/FastDFS/"/>
    
    
      <category term="FastDFS" scheme="http://wucb.top/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>FastDFS_Docker安装</title>
    <link href="http://wucb.top/2017/12/13/fastdfs_docker_conf/"/>
    <id>http://wucb.top/2017/12/13/fastdfs_docker_conf/</id>
    <published>2017-12-13T03:10:34.000Z</published>
    <updated>2017-12-18T03:22:33.446Z</updated>
    
    <content type="html"><![CDATA[<p>在centos7下使用FastDFS的docker镜像</p><h3 id="下载fastdfs的docker镜像"><a href="#下载fastdfs的docker镜像" class="headerlink" title="下载fastdfs的docker镜像"></a>下载fastdfs的docker镜像</h3><hr><p><a href="https://hub.docker.com/r/season/fastdfs/" target="_blank" rel="external">下载docker镜像</a>: <code>docker pull season/fastdfs</code></p><h3 id="fastdfs配置目录"><a href="#fastdfs配置目录" class="headerlink" title="fastdfs配置目录"></a>fastdfs配置目录</h3><hr><p>下载好了一个镜像以后，在宿主机中新建目录用,于存放fastdfs配置文件和数据,名称根据自己需求，如下只是样例，fastdfs在一台服务器支持多个store_path，每个store_path指向一个存储路径<br><code>etc(配置文件地址)</code> <code>storage_data(存储数据地址)</code>，<code>storage_data(存储数据地址)</code> <code>store_path(扩容)</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/fastdfs/etc/ </span><br><span class="line">mkdir /usr/local/fastdfs/data/storage_data</span><br><span class="line">mkdir /usr/local/fastdfs/data/store_path</span><br><span class="line">mkdir /usr/local/fastdfs/data/tracker_data</span><br></pre></td></tr></table></figure></p><h3 id="获取配置文件"><a href="#获取配置文件" class="headerlink" title="获取配置文件"></a>获取配置文件</h3><hr><p>启动一个fastdfs的docker容器，查看容器id，从容器中下载配置文件并且下载到上面创建的 <code>/usr/local/fastdfs/etc/</code> 目录中.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti --name fdfs_sh --net=host season/fastdfs sh</span><br><span class="line">docker ps -a   </span><br><span class="line">docker cp -a 07e7af1fdf74:/fdfs_conf/.  /usr/local/fastdfs/etc/tracker.conf</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><hr><p> 主要修改的是文件存储目录和跟踪服务器地址，<code>tracker_server</code> 根据自己机器的地址进行配置<br> tracker.conf 主要修改如下几行</p><blockquote><p>base_path=/fastdfs/storage<br>store_path0=/fastdfs/storage/<br>tracker_server=192.168.1.214:22122</p></blockquote><p> tracker.conf 主要修改如下几行</p><blockquote><p>tracker_server=192.168.1.214:22122</p></blockquote><p> client.conf修改如下几行</p><blockquote><p>tracker_server=192.168.1.214:22122</p></blockquote><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><hr><p>启动容器脚本,先启动一个tracker 然后再启动一个storage，<code>-v</code> 后面跟的目录映射，<code>TRACKER_SERVER</code> 地址根据自己机器的地址进行配置,<code>--privileged=true</code> 主要是解决目录权限<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run -tid --name  trakcer \</span><br><span class="line">        -v /usr/local/fastdfs/data/tracker_data/data:/fastdfs/tracker/data \</span><br><span class="line">        -v /usr/local/fastdfs/etc:/fdfs_conf \</span><br><span class="line">        --privileged=true \</span><br><span class="line">        --net=host  season/fastdfs tracker</span><br><span class="line"></span><br><span class="line">docker run -tid --name storage \</span><br><span class="line">        -v /usr/local/fastdfs/data/storage_data/data:/fastdfs/storage/data \</span><br><span class="line">        -v /usr/local/fastdfs/data/store_path:/fastdfs/store_path \</span><br><span class="line">        -v /usr/local/fastdfs/etc:/fdfs_conf \</span><br><span class="line">        --privileged=true \</span><br><span class="line">        --net=host -e TRACKER_SERVER:192.168.1.214:22122 \</span><br><span class="line">        season/fastdfs storage</span><br></pre></td></tr></table></figure></p><p>执行完上面的脚本会启动两个容器，使用<code>docker ps</code>可以进行查看,如果没有启动成功可以使用<code>docker logs 容器id</code> 查看日志</p><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><hr><p>还是启动一个容器，在容器中进行测试，启动容器会用到<code>client.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti --name fdfs_sh \</span><br><span class="line">        -v /usr/local/fastdfs/etc:/fdfs_conf \</span><br><span class="line">        --privileged=true \</span><br><span class="line">        --net=host season/fastdfs sh</span><br></pre></td></tr></table></figure><p>执行完脚本会自动进入容器，切换到<code>/usr/bin</code>然后执行上传文件。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/bin</span><br><span class="line">fdfs_test  /fdfs_conf/client.conf upload /fdfs_conf/storage.conf</span><br></pre></td></tr></table></figure></p><p>上传完成后会返回一些信息其中会包含文件地址,可以到宿主机目录进行查看</p><blockquote><p>example file url: <a href="http://192.168.1.214/group1/M00/00/00/wKgB1lozOU-ASzg7AAAgC81RIQ441_big.conf" target="_blank" rel="external">http://192.168.1.214/group1/M00/00/00/wKgB1lozOU-ASzg7AAAgC81RIQ441_big.conf</a></p></blockquote><h3 id="添加开放端口"><a href="#添加开放端口" class="headerlink" title="添加开放端口"></a>添加开放端口</h3><hr><p>添加开放端口，让fastdfs可以供其他程序调用<br>要添加哪些端口可以在fastdfs配置文件中查找。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=22122/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=23000/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=8088/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在centos7下使用FastDFS的docker镜像&lt;/p&gt;
&lt;h3 id=&quot;下载fastdfs的docker镜像&quot;&gt;&lt;a href=&quot;#下载fastdfs的docker镜像&quot; class=&quot;headerlink&quot; title=&quot;下载fastdfs的docker镜像&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="FastDFS" scheme="http://wucb.top/categories/FastDFS/"/>
    
    
      <category term="FastDFS" scheme="http://wucb.top/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>FastDFS 使用Java上传下载文件</title>
    <link href="http://wucb.top/2017/12/13/fastdfs_java/"/>
    <id>http://wucb.top/2017/12/13/fastdfs_java/</id>
    <published>2017-12-13T03:10:34.000Z</published>
    <updated>2017-12-15T06:03:28.226Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>在java程序中上传文件到FastDFS，需要在项目中引入fastdfs-client-java包<br>这个包在maven中央库中没有，可以自己下载源码后install<br><a href="https://github.com/happyfish100/fastdfs-client-java" target="_blank" rel="external">下载源码</a></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><hr><p>在项目<code>resource</code>目录中加入配置文件<code>fdfs_client.conf</code>在配置文件中加入如下内容<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">connect_timeout </span>= 2</span><br><span class="line"><span class="string">network_timeout </span>= <span class="string">30</span></span><br><span class="line"><span class="string">charset </span>=   <span class="string">UTF-8</span></span><br><span class="line"><span class="string">http.</span><span class="string">tracker_http_port </span>= <span class="string">8088</span></span><br><span class="line"><span class="string">http.</span><span class="string">anti_steal_token </span>= <span class="string">no</span></span><br><span class="line"><span class="string">http.</span><span class="string">secret_key </span>= <span class="string">FastDFS1234567890</span></span><br><span class="line"><span class="string">tracker_server </span>= <span class="string">192.</span><span class="string">168.</span>1.<span class="string">214:22122</span></span><br></pre></td></tr></table></figure></p><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.csource<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> org.csource.common.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.ClientGlobal;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.DownloadCallback;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.StorageClient;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.StorageClient1;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.StorageServer;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.TrackerClient;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.TrackerServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDFSTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件的方式</span></span><br><span class="line">        String configFileName = <span class="string">"fdfs_client.conf"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClientGlobal.init(configFileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        String path = <span class="string">"F:\\project\\mypro\\easycode\\easycode-parent\\example-fastdfs\\src\\main\\resource\\fdfs_client.conf"</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="comment">//返回储存路径:M00/00/00/wKgB1loyOaKAPsmdAAABEmKjEk440.conf</span></span><br><span class="line">        String[] files = uploadFile(file);</span><br><span class="line">        System.out.println(Arrays.asList(files));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] uploadFile(File file) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        String uploadFileName = file.getName();</span><br><span class="line">        <span class="keyword">byte</span>[] fileBuff = IOUtils.toByteArray(<span class="keyword">new</span> FileInputStream(file));;</span><br><span class="line">        String[] files = <span class="keyword">null</span>;</span><br><span class="line">        String fileExtName = uploadFileName.substring(uploadFileName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 建立连接</span></span><br><span class="line">        TrackerClient tracker = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">        TrackerServer trackerServer = tracker.getConnection();</span><br><span class="line">        StorageServer storageServer = <span class="keyword">null</span>;</span><br><span class="line">        StorageClient client = <span class="keyword">new</span> StorageClient(trackerServer, storageServer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置元信息</span></span><br><span class="line">        NameValuePair[] metaList = <span class="keyword">new</span> NameValuePair[<span class="number">3</span>];</span><br><span class="line">        metaList[<span class="number">0</span>] = <span class="keyword">new</span> NameValuePair(<span class="string">"fileName"</span>, uploadFileName);</span><br><span class="line">        metaList[<span class="number">1</span>] = <span class="keyword">new</span> NameValuePair(<span class="string">"fileExtName"</span>, fileExtName);</span><br><span class="line">        metaList[<span class="number">2</span>] = <span class="keyword">new</span> NameValuePair(<span class="string">"fileLength"</span>, String.valueOf(file.length()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上传文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            files = client.upload_file(fileBuff, fileExtName, metaList);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            trackerServer.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> files;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String fileId)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"tep"</span>);</span><br><span class="line">        TrackerClient tracker = <span class="keyword">null</span>;</span><br><span class="line">        TrackerServer trackerServer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//解码fileId</span></span><br><span class="line">            <span class="keyword">byte</span>[] bs = Base64.decodeBase64(fileId);</span><br><span class="line">            fileId = <span class="keyword">new</span> String(bs, <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 建立连接 fastDFS方式</span></span><br><span class="line">            tracker = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">            trackerServer = tracker.getConnection();</span><br><span class="line">            StorageServer storageServer = <span class="keyword">null</span>;</span><br><span class="line">            StorageClient1 client = <span class="keyword">new</span> StorageClient1(trackerServer, storageServer);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//响应内容设置</span></span><br><span class="line"><span class="comment">//            response.setContentType("image/png");</span></span><br><span class="line">            <span class="comment">//查询fdfs</span></span><br><span class="line">            client.download_file1(fileId, <span class="keyword">new</span> DownloadCallback() &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@parem</span> arg0 文件大小</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@parem</span> arg1 數據流</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@parem</span> arg2每次返回的大小</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">recv</span><span class="params">(<span class="keyword">long</span> arg0, <span class="keyword">byte</span>[] arg1, <span class="keyword">int</span> arg2)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//返回数据流</span></span><br><span class="line">                        fileOutputStream.write(arg1, <span class="number">0</span>, arg2);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                trackerServer.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/wucb/easycode-parent/tree/master/example-fastdfs" target="_blank" rel="external">查看本文源码</a></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;在java程序中上传文件到FastDFS，需要在项目中引入fastdfs-client-java包&lt;br&gt;这个包在maven中央库
      
    
    </summary>
    
      <category term="FastDFS" scheme="http://wucb.top/categories/FastDFS/"/>
    
    
      <category term="FastDFS" scheme="http://wucb.top/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>6.RxJava+Hystrix 小例子</title>
    <link href="http://wucb.top/2017/12/08/6.RxJava+Hystrix%20%E5%B0%8F%E4%BE%8B%E5%AD%90/"/>
    <id>http://wucb.top/2017/12/08/6.RxJava+Hystrix 小例子/</id>
    <published>2017-12-08T06:38:12.000Z</published>
    <updated>2017-12-08T00:08:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>Hystrix是什么<br>在复杂的分布式系统中，可能有成百上千个依赖服务，这些服务由于某种故障，比如机房的不可靠性、网络服务商的不可靠性等因素，导致某个服务不可用，如果系统不隔离该不可用的服务，可能会导致整个系统不可用<br>对Hystrix不做其他说明，看例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HystrixCommand&lt;String&gt;(HystrixCommandGroupKey.Factory.asKey(<span class="string">"test"</span>), <span class="number">1000</span>) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//业务代码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//错误处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.observe()</span><br><span class="line">        .doOnNext(str -&gt; System.out.println(str))</span><br><span class="line">        .subscribe();</span><br></pre></td></tr></table></figure><h4 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h4><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.reactivex<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rxjava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.netflix.hystrix<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hystrix-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;Hystrix是什么&lt;br&gt;在复杂的分布式系统中，可能有成百上千个依赖服务，这些服务由于某种故障，比如机房的不可靠性、网络服务商的
      
    
    </summary>
    
      <category term="RxJava" scheme="http://wucb.top/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="http://wucb.top/tags/RxJava/"/>
    
      <category term="异步编程" scheme="http://wucb.top/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>5.RxJava线程控制Scheduler</title>
    <link href="http://wucb.top/2017/12/06/5.RxJava%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6Scheduler/"/>
    <id>http://wucb.top/2017/12/06/5.RxJava线程控制Scheduler/</id>
    <published>2017-12-06T03:25:36.000Z</published>
    <updated>2017-12-08T00:08:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>在<code>RxJava</code> 中<code>Scheduler</code> 就是用来控制线程，比如我写的一段代码想要在新的线程中运行，使用observeOn(Schedulers.newThread())就可以了。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><hr><p>先来一个demo<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"test"</span>) <span class="comment">//发射数据</span></span><br><span class="line">.observeOn(Schedulers.newThread()) <span class="comment">//切到新线程</span></span><br><span class="line">.map(str -&gt; str+<span class="string">"1"</span>) <span class="comment">//将数据加上字符串1</span></span><br><span class="line">.subscribeOn(Schedulers.immediate())<span class="comment">//指定观察者执行的线程</span></span><br><span class="line">.subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123; <span class="comment">//订阅者</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="设置线程"><a href="#设置线程" class="headerlink" title="设置线程"></a>设置线程</h3><hr><p><code>subscribeOn()</code>: 设置subscribe()订阅所发生的线程，即 call() 执行的线程。只有第一次设置生效，之后多次调用无效</p><p><code>observeOn()</code>: 设置Observer运行的线程，设置后线程马上切换。</p><h3 id="线程控制器"><a href="#线程控制器" class="headerlink" title="线程控制器"></a>线程控制器</h3><hr><p>Schedulers提供了几种线程控制器</p><p><code>Schedulers.computation()</code>    用于计算任务，如事件循环或和回调处理，不要用于IO操作(IO操作请使用Schedulers.io())；默认线程数等于处理器的数量<br><code>Schedulers.from(executor)</code>    使用指定的Executor作为调度器<br><code>Schedulers.immediate()</code>    在当前线程立即开始执行任务<br><code>Schedulers.io()</code>    用于IO密集型任务，如异步阻塞IO操作，这个调度器的线程池会根据需要增长；对于普通的计算任务，请使用Schedulers.computation()；Schedulers.io( )默认是一个CachedThreadScheduler，很像一个有线程缓存的新线程调度器<br><code>Schedulers.newThread()</code>    为每个任务创建一个新线程<br><code>Schedulers.trampoline()</code>    当其它排队的任务完成后，在当前线程排队开始执行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;在&lt;code&gt;RxJava&lt;/code&gt; 中&lt;code&gt;Scheduler&lt;/code&gt; 就是用来控制线程，比如我写的一段代码想要
      
    
    </summary>
    
      <category term="RxJava" scheme="http://wucb.top/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="http://wucb.top/tags/RxJava/"/>
    
      <category term="异步编程" scheme="http://wucb.top/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>3.RxJava功能大全(转)</title>
    <link href="http://wucb.top/2017/12/06/3.RxJava%E5%8A%9F%E8%83%BD%E5%A4%A7%E5%85%A8(%E8%BD%AC)/"/>
    <id>http://wucb.top/2017/12/06/3.RxJava功能大全(转)/</id>
    <published>2017-12-06T02:54:47.000Z</published>
    <updated>2017-12-08T00:08:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>ReactiveX 都有哪些操作呢请看 <a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Operators.html" target="_blank" rel="external"><strong>原文地址</strong></a><br>可以快速略过，反正也记不住，用的时候查一次，大概开一下了解一下都有说明功能</p><h3 id="创建操作"><a href="#创建操作" class="headerlink" title="创建操作"></a>创建操作</h3><p>用于创建Observable的操作符</p><h3 id="变换操作"><a href="#变换操作" class="headerlink" title="变换操作"></a>变换操作</h3><p>这些操作符可用于对Observable发射的数据进行变换</p><h3 id="过滤操作"><a href="#过滤操作" class="headerlink" title="过滤操作"></a>过滤操作</h3><p>这些操作符用于从Observable发射的数据中进行选择</p><h3 id="组合操作"><a href="#组合操作" class="headerlink" title="组合操作"></a>组合操作</h3><p>组合操作符用于将多个Observable组合成一个单一的Observable</p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>这些操作符用于从错误通知中恢复</p><h3 id="辅助操作"><a href="#辅助操作" class="headerlink" title="辅助操作"></a>辅助操作</h3><p>一组用于处理Observable的操作符</p><h3 id="条件和布尔操作"><a href="#条件和布尔操作" class="headerlink" title="条件和布尔操作"></a>条件和布尔操作</h3><p>这些操作符可用于单个或多个数据项，也可用于Observable</p><h3 id="算术和聚合操作"><a href="#算术和聚合操作" class="headerlink" title="算术和聚合操作"></a>算术和聚合操作</h3><p>这些操作符可用于整个数据序列</p><h3 id="连接操作"><a href="#连接操作" class="headerlink" title="连接操作"></a>连接操作</h3><p>一些有精确可控的订阅行为的特殊Observable</p><h3 id="转换操作"><a href="#转换操作" class="headerlink" title="转换操作"></a>转换操作</h3><p>To — 将Observable转换为其它的对象或数据结构<br>Blocking 阻塞Observable的操作符</p><h3 id="操作符决策树"><a href="#操作符决策树" class="headerlink" title="操作符决策树"></a>操作符决策树</h3><p>几种主要的需求</p><p>直接创建一个Observable（创建操作）<br>组合多个Observable（组合操作）<br>对Observable发射的数据执行变换操作（变换操作）<br>从Observable发射的数据中取特定的值（过滤操作）<br>转发Observable的部分值（条件/布尔/过滤操作）<br>对Observable发射的数据序列求值（算术/聚合操作）</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ReactiveX 都有哪些操作呢请看 &lt;a href=&quot;https://mcxiaoke.gitbooks.io/rxdocs/content/Operators.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;原文地址&lt;/str
      
    
    </summary>
    
      <category term="RxJava" scheme="http://wucb.top/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="http://wucb.top/tags/RxJava/"/>
    
      <category term="异步编程" scheme="http://wucb.top/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>4.RxJava第一个实例</title>
    <link href="http://wucb.top/2017/12/05/4.RxJava%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B/"/>
    <id>http://wucb.top/2017/12/05/4.RxJava第一个实例/</id>
    <published>2017-12-05T02:49:36.000Z</published>
    <updated>2017-12-08T00:08:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><hr><p>还是基于考生和监考老师的例子，对RxJava中的几个概念进行理解</p><h3 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.reactivex<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rxjava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="先有一个考生Observable"><a href="#先有一个考生Observable" class="headerlink" title="先有一个考生Observable"></a>先有一个考生Observable</h3><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> Observable&lt;String&gt;  student = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line"><span class="comment">//subscriber 订阅者对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">subscriber.onNext(<span class="string">"我要交卷"</span>); <span class="comment">//发射一个"我要交卷"的String（调用订阅者对象方法）</span></span><br><span class="line">subscriber.onCompleted();<span class="comment">//发射完成，必须写这个，不写发布出去</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码就是说创建了一个发射源，并且发出了一个字符串。这个创建发射数据源的方式有很多</p><h3 id="再有一个监考老师Observer"><a href="#再有一个监考老师Observer" class="headerlink" title="再有一个监考老师Observer"></a>再有一个监考老师Observer</h3><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Observer&lt;String&gt; teach = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"收到你的试卷了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123; &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"收到请求"</span>+s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码就是创建了一个接收源，重写的几个方法<code>onCompleted(当接收完了)</code> <code>onError（当错误）</code> <code>onNext（当收到数据）</code></p><h3 id="老师进入考场了开始监考subscribe"><a href="#老师进入考场了开始监考subscribe" class="headerlink" title="老师进入考场了开始监考subscribe"></a>老师进入考场了开始监考subscribe</h3><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student.subscribe(teach);</span><br></pre></td></tr></table></figure><p>上面这句就是接收源订阅发送源，也就是老师开始监考学生。</p><h3 id="有个同学作弊Subject"><a href="#有个同学作弊Subject" class="headerlink" title="有个同学作弊Subject"></a>有个同学作弊Subject</h3><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PublishSubject&lt;String&gt; student2 = PublishSubject.create();</span><br><span class="line">student2.map(string -&gt; <span class="string">"你的答案给我了,我也要交卷了"</span>);</span><br><span class="line">student.subscribe(student2);<span class="comment">//接收student的数据</span></span><br><span class="line">student2.subscribe(teach);<span class="comment">//一样被teach监考</span></span><br></pre></td></tr></table></figure><p>上面代码，Subject既能接收也能发送。</p><h3 id="班主任在外边action0"><a href="#班主任在外边action0" class="headerlink" title="班主任在外边action0"></a>班主任在外边action0</h3><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Action1 headTeacher = <span class="keyword">new</span> Action1() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-------------"</span>+o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">student.subscribe(headTeacher);</span><br></pre></td></tr></table></figure><p>班主任等你交卷了出来有话和你说<br>为啥用Action1而不用Observer呢，班主任只关心你考完了，在考场里的其他动作，她没必要处理</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;还是基于考生和监考老师的例子，对RxJava中的几个概念进行理解&lt;/p&gt;
&lt;h3 id=&quot;maven依赖&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="RxJava" scheme="http://wucb.top/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="http://wucb.top/tags/RxJava/"/>
    
      <category term="异步编程" scheme="http://wucb.top/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2.RxJava概念</title>
    <link href="http://wucb.top/2017/12/05/2.RxJava%E6%A6%82%E5%BF%B5/"/>
    <id>http://wucb.top/2017/12/05/2.RxJava概念/</id>
    <published>2017-12-05T01:54:32.000Z</published>
    <updated>2017-12-08T00:08:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>RxJava是Java VM上一个灵活的、使用可观测序列来组成的一个异步的、基于事件的库。<br>上面的这句话觉得不好理解的可以理解<code>异步</code> <code>观察者</code></p><h3 id="异步-观察者模式"><a href="#异步-观察者模式" class="headerlink" title="异步 观察者模式"></a>异步 观察者模式</h3><p>从使用的角度来说，可能也只有异步的个点是最强需求了。<br>先列几个RxJava中基本的概念<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>  Observable（被观察者、发射源） </span><br><span class="line"><span class="number">2.</span>  Observer/Subscriber（观察者、接收源）</span><br><span class="line"><span class="number">3.</span>  Subject （可被观察也可观察别人、既可充当发射源，也可充当接收源）</span><br><span class="line"><span class="number">4.</span>  Subscriber（订阅者、观察者对象）</span><br><span class="line"><span class="number">3.</span>  Action0 （RxJava中的一个接口，只有一个call方法，没有返回值)</span><br><span class="line"><span class="number">4.</span>  Func0（与Action0相似， 有返回值）</span><br></pre></td></tr></table></figure></p><p>举个例子：<br>你在考场考试，监考官在观察你（也就是订阅了）有没有作弊、喧哗或要交卷了。<br>那么这个是时候呢<br><code>Observable</code>也就是你，是一个被观察者<br><code>Observer/Subscriber</code> 也就是监考官就是在观察你。<br><code>Observable</code>发出一个数据。也就是你交卷了。<br><code>Observer/Subscriber</code> 就会受到数据（你交的试卷）</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;RxJava是Java VM上一个灵活的、使用可观测序列来组成的一个异步的、基于事件的库。&lt;br&gt;上面的这句话觉得不好理解的可以理解&lt;cod
      
    
    </summary>
    
      <category term="RxJava" scheme="http://wucb.top/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="http://wucb.top/tags/RxJava/"/>
    
      <category term="异步编程" scheme="http://wucb.top/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>1.RxJava综述</title>
    <link href="http://wucb.top/2017/12/04/1.RxJava%E7%BB%BC%E8%BF%B0/"/>
    <id>http://wucb.top/2017/12/04/1.RxJava综述/</id>
    <published>2017-12-04T05:27:02.000Z</published>
    <updated>2017-12-08T00:08:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p> 文档：<a href="https://mcxiaoke.gitbooks.io/rxdocs/content/" target="_blank" rel="external">rxjava中文文档</a></p><h2 id="Git：ReactiveX-RxJava"><a href="#Git：ReactiveX-RxJava" class="headerlink" title=" Git：ReactiveX/RxJava"></a> Git：<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">ReactiveX/RxJava</a></h2><h2 id="Rx是什么"><a href="#Rx是什么" class="headerlink" title="Rx是什么"></a>Rx是什么</h2><p>来看看官方的解释<br>rx：ReactiveX<br>微软给的定义是，Rx是一个函数库，让开发者可以利用可观察序列和LINQ风格查询操作符来编写异步和基于事件的程序，使用Rx，开发者可以用Observables表示异步数据流，用LINQ操作符查询异步数据流， 用Schedulers参数化异步数据流的并发处理，Rx可以这样定义：Rx = Observables + LINQ + Schedulers。</p><h2 id="RxJava是什么"><a href="#RxJava是什么" class="headerlink" title="RxJava是什么"></a>RxJava是什么</h2><p>RxJava就是一种用Java语言实现的响应式编程，来创建基于事件的异步程序<br>一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库<br><strong>关键词</strong>：<code>异步</code> <code>响应式编程</code> <code>基于事件</code> </p><h2 id="Rxjava有什么用"><a href="#Rxjava有什么用" class="headerlink" title="Rxjava有什么用"></a>Rxjava有什么用</h2><p>大白话：实现异步调用，少写代码，方便数据操作</p><h2 id="为什么要使用Rxjava"><a href="#为什么要使用Rxjava" class="headerlink" title="为什么要使用Rxjava"></a>为什么要使用Rxjava</h2><p>你的项目需要异步调用我觉得这个最关键的，异步和熔断</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt; 文档：&lt;a href=&quot;https://mcxiaoke.gitbooks.io/rxdocs/content/&quot; tar
      
    
    </summary>
    
      <category term="RxJava" scheme="http://wucb.top/categories/RxJava/"/>
    
    
      <category term="RxJava" scheme="http://wucb.top/tags/RxJava/"/>
    
      <category term="异步编程" scheme="http://wucb.top/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>maven离线使用，本地明明有却提示找不到jar</title>
    <link href="http://wucb.top/2017/11/29/maven%E7%A6%BB%E7%BA%BF/"/>
    <id>http://wucb.top/2017/11/29/maven离线/</id>
    <published>2017-11-29T03:19:55.000Z</published>
    <updated>2017-11-30T08:30:57.942Z</updated>
    
    <content type="html"><![CDATA[<hr><p>有的时候我们的开发环境中没有网络，也没有私服，对就是这样无奈（无语），<strong>明明本地<code>maven</code>仓库中有该jar包，却提示没有</strong>。<br>不妨尝试如下的操作，可能会产生意想不到的结果哦。</p><p>1) 删除<code>maven</code>本地仓库<code>repository</code>中名字为<strong>_remote.repositories</strong>的所有文件。<br>2) 删除<code>maven</code>本地仓库<code>repository</code>中<strong>.lastUpdated</strong>为后缀的所有文件。</p><p>执行以上两步，刷新你的项目，然后就可以测试<code>maven</code>打包了。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;有的时候我们的开发环境中没有网络，也没有私服，对就是这样无奈（无语），&lt;strong&gt;明明本地&lt;code&gt;maven&lt;/code&gt;仓库中有该jar包，却提示没有&lt;/strong&gt;。&lt;br&gt;不妨尝试如下的操作，可能会产生意想不到的结果哦。&lt;/p&gt;
&lt;p&gt;1) 删除&lt;
      
    
    </summary>
    
      <category term="maven" scheme="http://wucb.top/categories/maven/"/>
    
    
      <category term="maven，疑难杂症" scheme="http://wucb.top/tags/maven%EF%BC%8C%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>Markdown的扩展格式</title>
    <link href="http://wucb.top/2017/11/27/Markdown/"/>
    <id>http://wucb.top/2017/11/27/Markdown/</id>
    <published>2017-11-27T06:03:44.000Z</published>
    <updated>2017-11-27T07:58:46.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><hr><p><code>Markdown</code> 是为网络书写者而生的方便<code>text-to-HTML</code>工具，它允许人们用一种易读易写的纯文本格式进行书写，然后将其转化成<code>XHTML</code>或<code>HTML</code></p><h2 id="扩展格式"><a href="#扩展格式" class="headerlink" title="扩展格式"></a>扩展格式</h2><hr><p>常用扩展Markdown格式有:</p><p><code>GFM</code> <code>PHP Markdown Extra</code> <code>MultiMarkdown</code> <code>Pandoc Markdown</code>等。</p><h3 id="GFM"><a href="#GFM" class="headerlink" title="GFM"></a>GFM</h3><hr><p>这种衍生<code>Markdown</code>叫做<strong>Github Flavored Markdown</strong>，简称 <strong>GFM</strong> </p><blockquote><p>详细说明：<a href="https://help.github.com/categories/writing-on-github/" target="_blank" rel="external">https://help.github.com/categories/writing-on-github/</a></p></blockquote><h4 id="与原生Markdown的主要不同："><a href="#与原生Markdown的主要不同：" class="headerlink" title="与原生Markdown的主要不同："></a>与原生Markdown的主要不同：</h4><hr><ul><li>围栏式（<code>Fenced</code>）代码块：在代码的上下增加3个反引号```，可选择性定义代码语种，并支持代码高亮。</li><li>列表嵌套方法：改为每次嵌套缩进两个空格。</li><li>支持任务列表：在每个列表项目加入[ ]，完成任务用 [x]，如：- [x] 任务说明。</li><li>支持简单表格</li><li>支持emoji表情</li><li>删除线：~~无空格包裹。<h3 id="PHP-Markdown-Extra"><a href="#PHP-Markdown-Extra" class="headerlink" title="PHP Markdown Extra"></a>PHP Markdown Extra</h3></li></ul><hr><p> Markdown Extra是PHP Markdown的一个扩展，实现了当前Markdown语法所不具备的一些功能。 Markdown Extra在PHP Markdown Lib中作为单独的解析器类提供</p><blockquote><p>详细的语法说明：<a href="https://michelf.ca/projects/php-markdown/extra/" target="_blank" rel="external">https://michelf.ca/projects/php-markdown/extra/</a> </p></blockquote><h4 id="与原生Markdown的主要不同：-1"><a href="#与原生Markdown的主要不同：-1" class="headerlink" title="与原生Markdown的主要不同："></a>与原生Markdown的主要不同：</h4><hr><ul><li>内嵌html：块标签可以缩进不超过3个空格，且可以在块标签中选择性使用markdown语法（方法略）。</li><li>可以为区块元素设置id和class属性，实现文章内部跳转，方法略。</li><li>区块代码：与GFM相似，可以使用栅栏方式，在代码上下行用3个或以上波浪号~或反引号`包裹，亦支持代码高亮。</li><li>表格：同GFM</li><li>支持定义列表：方法略</li><li>支持脚注：[^1]，在新行[^1]: 脚注内容  <strong><em>注意</em></strong>：脚注名字必须唯一</li><li>支持缩略语：方法略</li><li>强调：两字词中间的下划线不会被解释成强调</li></ul><h3 id="MultiMarkdown"><a href="#MultiMarkdown" class="headerlink" title="MultiMarkdown"></a>MultiMarkdown</h3><hr><p>原生markdown文档只能从纯文本转换HTML。而MultiMarkdown则是扩大了原生markdown的转换范围，让其可以方便的转换成<code>HTML/XHTML</code> <code>LaTeX (which can be processed into a PDF)</code> <code>OpenDocument Text document</code> <code>OPML</code> </p><blockquote><p>详细的语法说明见：<a href="http://fletcherpenney.net" target="_blank" rel="external">http://fletcherpenney.net</a><br>这是语法快速查询表：<a href="https://rawgit.com/fletcher/human-markdown-reference/master/index.html" target="_blank" rel="external">https://rawgit.com/fletcher/human-markdown-reference/master/index.html</a></p></blockquote><h4 id="与原生Markdown的主要不同：-2"><a href="#与原生Markdown的主要不同：-2" class="headerlink" title="与原生Markdown的主要不同："></a>与原生Markdown的主要不同：</h4><ul><li>支持元数据：标题、作者、日期等信息，兼容部分YAML。</li><li>支持交叉引用。</li><li>支持添加链接和图片的属性。</li><li>图片可以作为区块元素：如果一个图片语言独立成段，会被自动解释为区块元素，图片下会添加一行图片说明。</li><li>支持部分复杂表格：兼容PHP Markdown Extra的表格，同时可以——多行表头，单元格横向合并，表格分区，表格下行表格说明等。</li><li>支持脚注：同PHP Markdown Extra中的脚注。</li><li>支持参考文献（Citations）</li><li>支持定义列表：同PHP Markdown Extra。</li><li>支持缩略语（Abbreviations）：同PHP Markdown Extra。</li><li>支持栅栏式区块代码：上下行3到5个反引号包裹代码，可定义语法种类，选择性语法高亮。 </li><li>注意：首尾行的反引号数量要一致。</li><li>支持MathJax公式（区块与行内）：区块公式在新行用\[和\]包裹，或首尾用两个dollar$$包裹。行内公式用\(和\)包裹，或首尾各用一个dollar$包裹。</li><li>支持上标与下标：上标为单个字符，前面加^，为多个字符，用^包裹。下标为单个字符，前面加~，为多个字符，用~包裹。</li><li>支持术语表</li><li>支持修订功能（CriticMarkup）：可以显示修订痕迹<ul><li>删除：{–删除的文本 –}</li><li>添加：{++新增的文本 ++}</li><li>替换：{<del>删除的文本~&gt;新增文本</del>}</li><li>高亮：{==高亮的文本==}</li><li>备注：{&gt;&gt;备注文本&lt;&lt;}</li></ul></li></ul><ul><li>内嵌HTML，可在块级HTML中选择性地添加MultiMarkdown语法。</li><li>支持内嵌其他文件，txt、tet、fodt、html等</li><li>换行方式改为行末使用\换行。（原生Markdown使用2个空格换行）</li><li>支持目录：添加目录<h3 id="Pandoc’s-Markdown"><a href="#Pandoc’s-Markdown" class="headerlink" title="Pandoc’s Markdown"></a>Pandoc’s Markdown</h3></li></ul><hr><p>Pandoc本身是一个多格式文档的转换工具，所以Pandoc Markdown与MultiMarkdown的设计目的相似，使Markdown可以转换成更多的不同格式，因为Pandoc支持的格式很多，这也就使的Pandoc’s Markdown非常的丰富，比如表格就有4种不同的书写方法。</p><blockquote><p>详细的语法说明见：<a href="http://pandoc.org/MANUAL.html#pandocs-markdown" target="_blank" rel="external">http://pandoc.org/MANUAL.html#pandocs-markdown</a><br>翻译的中文版：<a href="http://pages.tzengyuxio.me/pandoc/" target="_blank" rel="external">http://pages.tzengyuxio.me/pandoc/</a></p></blockquote><h4 id="与原生Markdown的主要不同：-3"><a href="#与原生Markdown的主要不同：-3" class="headerlink" title="与原生Markdown的主要不同："></a>与原生Markdown的主要不同：</h4><ul><li>强制换行支持两种方式：行尾两个空格换行，反斜杆换行。</li><li>Atx式标题之前一定要预留空行。标题行尾可加标题识别符。</li><li>区块引用之前一定要预留空行。</li><li>围栏式区块代码可以用3个以上波浪线或反引号组成的行包裹代码。之前必须留空行。</li><li>支持行区块</li><li>不同形式的列表会生成不同的列表</li><li>支持连续编号的范例清单，范例项目应用与整个文档，不局限与单一清单</li><li>支持定义列</li><li>支持简单表格、多行表格、格框表格和管线表格四种表格样式</li><li>支持文件标题区块（类似元数据）</li><li>支持删除线</li><li>支持上标、下标</li><li>支持数字公式</li><li>支持内嵌TeX</li></ul><h3 id="CommonMark"><a href="#CommonMark" class="headerlink" title="CommonMark"></a>CommonMark</h3><p>由于创始人自2004年Markdown诞生之后就没有更新过Markdown语法，众多的遗留问题没有得到解决，加上扩展语法的自由发展和Markdown编辑器的涌现，导致了很严重的方言和兼容性问题。因此有人希望对Markdown语法进行规整和统一，建立一套Markdown的语法规范，而CommonMark正是这样产物。CommonMark与一般的衍生语法不同，它的目的不是扩展Markdown的功能，而是解决原生markdown的遗留问题和方言问题，规范Markdown的书写，成为Markdown的标准。可惜此举得到Markdown创始人John Gruber的强力反对，所以至今CommonMark并没有得到广泛的认可。但是其实就CommonMark本身而言，它规范了Markdown的各项语法，有许多可取之处。CommonMark的语法说明是所有markdown语法说明中最长最详细的，优先问题、缩进问题、空行问题、嵌套问题等等容易出现语法冲突的地方都作了非常详细的说明</p><blockquote><p>详细的语法说明：<a href="http://spec.commonmark.org/" target="_blank" rel="external">http://spec.commonmark.org/</a></p></blockquote><h4 id="与原生Markdown的主要不同：-4"><a href="#与原生Markdown的主要不同：-4" class="headerlink" title="与原生Markdown的主要不同："></a>与原生Markdown的主要不同：</h4><ul><li>定义了优先级别：区块语法的优先级别大于行内语法。</li><li>支持围栏式区块代码</li><li>支持1）作为有序列表的项目标记</li><li>支持 \作为换行符。</li><li>列表嵌套采用行首内容对齐，而非4个空格</li><li>Setext式标题支持多行</li></ul><blockquote><p>更多Markdown相关知识请访问<a href="https://sspai.com/post/37264" target="_blank" rel="external">https://sspai.com/post/37264</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;Markdown&lt;/code&gt; 是为网络书写者而生的方便&lt;code&gt;text-to-HTML&lt;/code&gt;工具，它允许
      
    
    </summary>
    
      <category term="Markdown" scheme="http://wucb.top/categories/Markdown/"/>
    
    
      <category term="markdown分类" scheme="http://wucb.top/tags/markdown%E5%88%86%E7%B1%BB/"/>
    
      <category term="md" scheme="http://wucb.top/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wucb.top/2017/11/24/hello-world%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>http://wucb.top/2017/11/24/hello-world - 副本/</id>
    <published>2017-11-24T07:03:27.467Z</published>
    <updated>2017-11-23T03:12:52.338Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Hexo教程" scheme="http://wucb.top/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
</feed>
